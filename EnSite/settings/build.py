"""
Django settings for EnSite project.

Generated by 'django-admin startproject' using Django 3.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path
import os
import cloudinary
import cloudinary.uploader
import cloudinary.api

# cloudinary settings (put in env variables)
cloudinary.config( 
  cloud_name = "enactusjmi", 
  api_key = "916763216881319", 
  api_secret = "hvXlXHOckzjV_7-FZk3_SqvE7W8" 
)


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/


# Application definition

INSTALLED_APPS = [
    'whitenoise.runserver_nostatic',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # third party
    'corsheaders',
    'website',
    'store',
    'cloudinary',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'EnSite.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'EnSite.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases
'''
if os.getenv('GAE_APPLICATION', None):

    # Running on production App Engine, so connect to Google Cloud SQL using
    # the unix socket at /cloudsql/<your-cloudsql-connection string>
    DATABASES = {

        'default': {

            'ENGINE': 'django.db.backends.postgresql_psycopg2',

            'NAME': 'main',

            'USER': 'enactus-instance',

            'PASSWORD': 'qDczDnJjgrAcFakj',

            'HOST': '/cloudsql/enactus-300513:asia-south1:enactus-instance',

            'PORT': '5432',

        }
    }
else:

    # Running locally so connect to either a local MySQL instance or connect to
    # Cloud SQL via the proxy. To start the proxy via command line:
    #
    #     $ cloud_sql_proxy -instances=[INSTANCE_CONNECTION_NAME]=tcp:3306
    #
    # See https://cloud.google.com/sql/docs/mysql-connect-proxy
    DATABASES = {
        'default': {
 
            'ENGINE': 'django.db.backends.postgresql_psycopg2',
    
            'NAME': 'test',
            # 'NAME': 'main',
    
            'USER': 'postgres',
            # 'USER': 'main',
            # 'USER': 'enactus-instance',
    
            'PASSWORD': 'postGresql1!',
            # 'PASSWORD': 'qDczDnJjgrAcFakj',
    
            # 'HOST': '35.244.7.161',
    
            'PORT': '5432',
    
        }
    }
    '''
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR,'db.sqlite3')
    }
}

 

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# DEFAULT_FILE_STORAGE = 'storages.backends.gcloud.GoogleCloudStorage'
# GS_BUCKET_NAME = 'enactus-300513.appspot.com'

# STATICFILES_STORAGE = 'storages.backends.gcloud.GoogleCloudStorage'

CORS_ALLOWED_ORIGINS=[
    'http://localhost',
    'http://enactusjmi.org',
    'https://enactus-300513.el.r.appspot.com',
    'http://346f87819e6f.ngrok.io',
    'https://346f87819e6f.ngrok.io',
    # 'https://storage.googleapis.com/enactus-300513.appspot.com',
    # 'https://storage.googleapis.com/enactus-300513.appspot.com',
    ]
CORS_URLS_REGEX = r'^/api/.*$'




# In your templates, use the static template tag to build
# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'
# STATIC_URL = 'https://storage.googleapis.com/enactus-300513.appspot.com/static/'

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
    # 'https://storage.googleapis.com/enactus-300513.appspot.com/static/',
    # 'https://storage.googleapis.com/{}/static/'.format(GS_BUCKET_NAME),
    # BASE_DIR / "static",
    # '/var/www/static/',
]

MEDIA_URL = "/images/"
MEDIA_ROOT = os.path.join(BASE_DIR, "static/images")

STATIC_ROOT = "staticfiles"
# STATIC_ROOT = os.path.join(os.path.dirname(BASE_DIR), 'enactus-300513.appspot.com')


